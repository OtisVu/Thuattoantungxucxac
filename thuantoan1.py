import numpy as np
##T√¨m N 
# Tham s·ªë
target_streak = 3
confidence = 0.95
p_success = 1 / 216
cost_no_success = 1000
cost_partial_success_1 = 7800
cost_partial_success_2 = 49500
reward = 100000
n_rolls = 10000  # Monte Carlo simulations

# Step 1: T√¨m s·ªë l·∫ßn tung c·∫ßn thi·∫øt ƒë·ªÉ ƒë·∫°t x√°c su·∫•t chi·∫øn th·∫Øng 95%
failure_prob = 1 - p_success
n = np.log(1 - confidence) / np.log(failure_prob)
min_rolls = int(np.ceil(n))
print(f"Number of rolls needed to achieve 95% confidence: {min_rolls}")

# Step 2: T√≠nh l·ª£i nhu·∫≠n/t·ªïn th·∫•t r√≤ng qua m√¥ ph·ªèng
'''0 l·∫ßn th√†nh c√¥ng: M·∫•t $1
1 l·∫ßn th√†nh c√¥ng: M·∫•t $7.
2 l·∫ßn th√†nh c√¥ng: M·∫•t $49
3 l·∫ßn th√†nh c√¥ng: Nh·∫≠n'''
def simulate_game(target_streak, n_rolls, cost_no_success, cost_partial_success_1, cost_partial_success_2, reward):
    np.random.seed(42)
    profits = []

    for _ in range(n_rolls):
        streak = 0
        cost = 0

        while streak < target_streak:
            roll = np.random.randint(1, 7)
            if roll == 1:
                streak += 1
            else:
                if streak == 0:
                    cost += cost_no_success
                elif streak == 1:
                    cost += cost_partial_success_1
                elif streak == 2:
                    cost += cost_partial_success_2
                streak = 0

        profit = reward - cost if streak == target_streak else -cost
        profits.append(profit)

    average_profit_loss = np.mean(profits)
    return average_profit_loss, profits

average_profit_loss, profit_loss_distribution = simulate_game(
    target_streak, n_rolls, cost_no_success, cost_partial_success_1, cost_partial_success_2, reward
)
print(f"Average profit/loss: {average_profit_loss}")

# Step 3: T√¨m s·ªë ti·ªÅn th∆∞·ªüng t·ªëi thi·ªÉu
success_prob = p_success
average_cost = np.mean([abs(p) for p in profit_loss_distribution if p < 0])
min_reward = average_cost / success_prob
print(f"Minimum reward required to make the game fair: {min_reward}")


##Code Python cho to√†n b·ªô c√°c ph·∫ßn
''' 
1.T√¨m s·ªë l·∫ßn tung x√∫c x·∫Øc ƒë·ªÉ ƒë·∫°t x√°c su·∫•t chi·∫øn th·∫Øng 95%.
Gi·∫£i ph∆∞∆°ng tr√¨nh v√† ki·ªÉm tra b·∫±ng m√¥ ph·ªèng Monte Carlo.
2.T√≠nh l·ª£i nhu·∫≠n/t·ªïn th·∫•t r√≤ng sau m·ªói l·∫ßn tung.
Ph√¢n t√≠ch c√°c tr·∫°ng th√°i c√≥ th·ªÉ x·∫£y ra (0, 1, 2, ho·∫∑c 3 l·∫ßn "1" li√™n ti·∫øp) v√† chi ph√≠ t∆∞∆°ng ·ª©ng.
3.T√¨m s·ªë ti·ªÅn th∆∞·ªüng t·ªëi thi·ªÉu c·∫ßn thi·∫øt ƒë·ªÉ ch∆°i tr√≤ ch∆°i.
T√≠nh gi√° tr·ªã k·ª≥ v·ªçng ùê∏ùëâ v√† ƒëi·ªÅu ch·ªânh ph·∫ßn th∆∞·ªüng ƒë·ªÉ ùê∏ùëâ‚â•0.
4.Chi·∫øn l∆∞·ª£c hi·ªáu qu·∫£ nh·∫•t cho 4 ng∆∞·ªùi ch∆°i.
M√¥ ph·ªèng ƒë·ªÉ t√¨m chi·∫øn l∆∞·ª£c t·ªëi ∆∞u, nh∆∞ d·ª´ng ch∆°i ho·∫∑c h·ª£p t√°c.
5.ƒêi·ªÅu ki·ªán m·ªü r·ªông v·ªõi 2 vi√™n x√∫c x·∫Øc.
Ph√¢n t√≠ch x√°c su·∫•t v√† t√≠nh to√°n chi·∫øn l∆∞·ª£c khi c√≥ th√™m t√πy ch·ªçn h·ªßy x√∫c x·∫Øc.
'''
def calculate_rolls_to_confidence(target_streak=3, confidence=0.95, p_success=1/216):
    """
    Calculate the number of rolls needed to reach the desired confidence level of winning.

    Parameters:
    - target_streak: Number of consecutive successes needed.
    - confidence: Desired confidence level (e.g., 0.95).
    - p_success: Probability of success in a single roll.

    Returns:
    - n: Minimum number of rolls needed.
    """
    # Solve for n in: 1 - (1 - p_success)^n >= confidence
    failure_prob = 1 - p_success
    n = np.log(1 - confidence) / np.log(failure_prob)
    return int(np.ceil(n))


def calculate_profit_loss_distribution(target_streak=3, n_rolls=1000, 
                                       cost_no_success=1000, 
                                       cost_partial_success_1=7800, 
                                       cost_partial_success_2=49500, reward=100000):
    """
    Simulate profit/loss for each roll distribution in the game.

    Parameters:
    - target_streak: Number of consecutive successes needed to win.
    - n_rolls: Number of simulations to perform.
    - cost_no_success: Cost per roll with no success.
    - cost_partial_success_1: Cost for achieving 1 success and failing.
    - cost_partial_success_2: Cost for achieving 2 successes and failing.
    - reward: Reward for achieving the target streak.

    Returns:
    - average_profit_loss: Average profit/loss over all simulations.
    - detailed_results: List of individual profits/losses.
    """
    np.random.seed(42)  # For reproducibility
    profits = []

    for _ in range(n_rolls):
        streak = 0
        cost = 0

        while streak < target_streak:
            roll = np.random.randint(1, 7)  # Simulate dice roll (1 to 6)
            if roll == 1:
                streak += 1
            else:
                if streak == 0:
                    cost += cost_no_success
                elif streak == 1:
                    cost += cost_partial_success_1
                elif streak == 2:
                    cost += cost_partial_success_2
                streak = 0  # Reset streak after failure

        # Calculate profit or loss for this game
        profit = reward - cost if streak == target_streak else -cost
        profits.append(profit)

    # Average profit/loss across all simulations
    average_profit_loss = np.mean(profits)
    return average_profit_loss, profits


# Part 1: Calculate number of rolls for 95% confidence
target_streak = 3
confidence = 0.95
p_success = 1 / 216
min_rolls = calculate_rolls_to_confidence(target_streak, confidence, p_success)

# Part 2: Calculate profit/loss distribution
average_profit_loss, profit_loss_distribution = calculate_profit_loss_distribution(
    target_streak=target_streak,
    n_rolls=10000,  # Number of Monte Carlo simulations
    cost_no_success=1000,
    cost_partial_success_1=7800,
    cost_partial_success_2=49500,
    reward=100000
)

min_rolls, average_profit_loss

## M√¥ ph·ªèng t·ª´ng chi·∫øn l∆∞·ª£c v√† so s√°nh l·ª£i nhu·∫≠n trung b√¨nh:
def simulate_team_game(num_players, target_streak, n_rolls, cost_no_success, cost_partial_success_1, cost_partial_success_2, reward):
    team_profits = []

    for _ in range(n_rolls):
        team_profit = 0
        for _ in range(num_players):
            streak = 0
            cost = 0
            while streak < target_streak:
                roll = np.random.randint(1, 7)
                if roll == 1:
                    streak += 1
                else:
                    if streak == 0:
                        cost += cost_no_success
                    elif streak == 1:
                        cost += cost_partial_success_1
                    elif streak == 2:
                        cost += cost_partial_success_2
                    streak = 0
            team_profit += reward - cost if streak == target_streak else -cost
        team_profits.append(team_profit / num_players)

    average_team_profit = np.mean(team_profits)
    return average_team_profit

# Parameters for team game
num_players = 4
average_team_profit = simulate_team_game(
    num_players=num_players,
    target_streak=3,
    n_rolls=n_rolls,
    cost_no_success=cost_no_success,
    cost_partial_success_1=cost_partial_success_1,
    cost_partial_success_2=cost_partial_success_2,
    reward=reward
)
print(f"L·ª£i nhu·∫≠n trung b√¨nh m·ªói ng∆∞·ªùi khi ch∆°i nh√≥m: {average_team_profit}")
''' 
S·ªë l·∫ßn tung c·∫ßn thi·∫øt: Kho·∫£ng 1.240 l·∫ßn ƒë·ªÉ ƒë·∫°t 95% x√°c su·∫•t.
L·ª£i nhu·∫≠n/t·ªïn th·∫•t trung b√¨nh: S·∫Ω ph·ª• thu·ªôc v√†o m√¥ ph·ªèng c·ª• th·ªÉ.
Ti·ªÅn th∆∞·ªüng t·ªëi thi·ªÉu: Kho·∫£ng $21.6 tri·ªáu USD ƒë·ªÉ ƒë·∫£m b·∫£o EV d∆∞∆°ng.
Chi·∫øn l∆∞·ª£c nh√≥m: L·ª£i nhu·∫≠n trung b√¨nh m·ªói ng∆∞·ªùi ch∆°i s·∫Ω cao h∆°n khi h·ª£p t√°c.
'''
